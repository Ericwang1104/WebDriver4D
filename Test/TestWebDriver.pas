unit TestWebDriver;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, System.Classes, System.SysUtils, JsonDataObjects, WebDriver4D,
  WD_http,wd_httpDelphi;

type
  // Test methods for class TPhantomjs

  TestTPhantomjs = class(TTestCase)
  strict private
    FWD: TWebDriver;
    procedure StartIEDriver;
    procedure LoginWeibo;
    procedure StartFireFox;
    procedure StartPhantomjs;
  private
    FCMD: TDelphiCommand;

  public
    procedure CheckHasError;
    procedure SetUp; override;
    procedure TearDown; override;
    procedure TestCloseWindow;
    procedure TestStartPm;
    procedure TestFindElementByID;
    procedure TestFindElementByTag;
    procedure TestFindElementByClassName;
    procedure TestFindElement;
    procedure TestFindElements;
    procedure TestFindElementByLinkText;
    procedure TestFindElementByXPath;
    procedure TestGetCurrentWindowHandle;
    procedure TestGetElementAttribute;
    procedure TestSave_screenshot;
    procedure TestSet_Window_Size;
    procedure TestElementClick;
    procedure TestElement_Location;
    procedure TestElement_ScreenShort;
    procedure TestElement_Size;
    procedure TestFindElementsByXPath;
    procedure TestFindElementsByTag;
    procedure TestFindElementsByLinkText;
    procedure TestFindElementsByID;
    procedure TestFindElementsByClassName;
    procedure TestGetAllSession;
    procedure TestGet_AllCookies;
    procedure TestImplicitly_Wait;
    procedure TestQuit;
    procedure TestRefresh;
    procedure TestTerminatePhantomjs;
    procedure TestClearAll;
  published
    procedure TestClearAllSession;
    procedure TestDeleteSession;
    procedure TestExecuteScript;
    procedure TestGetAllCookies;
    procedure TestGetURL;
    procedure TestInit;
    procedure TestNewSession;
    procedure TestScreenShot;
    procedure TestGetElement;
    procedure TestGetElements;
    procedure TestItJuzi;
    procedure TestLoginWeibo;
    procedure TestSaveElementScreen;
    procedure TestSendKey;
    procedure TestSetWindowSize;
  end;
  // Test methods for class TBrowserCMD

  TestTBrowserCMD = class(TTestCase)
  strict private
    FCMD: TDriverCommand;
  private
    FQJSON: TJsonObject;
  public
    function NewSession: string;
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestExecuteDelete;
    procedure TestExecuteGet;
    procedure TestExecutePost;
  end;

implementation

uses
  Vcl.Imaging.pngimage;

procedure TestTPhantomjs.CheckHasError;
begin
  CheckEquals(FWD.HasError, false, FWD.ErrorMessage);
end;

procedure TestTPhantomjs.StartIEDriver;
begin
  FWD.BrowserType :=btIE;
  FWD.DiskCache :=false;
  FWD.LogFile :='d:\webdriver\ie_log.log';
  FWD.StartPm('D:\webdriver\IEDriverServer_x86.exe');
end;

procedure TestTPhantomjs.LoginWeibo;
var
  hand: string;
  Ele: string;
  Count: integer;
begin
  Sleep(500);

  FWD.Implicitly_Wait(3000);

  FWD.Set_Window_Size(1920, 1080);

  FWD.GetURL('https://passport.weibo.cn/signin/login?entry=mweibo');

  // Sleep(3000);

  // ele :=FWD.FindElementsByXPath('//div[@class="card card9 line-around" and @data-act-type="hover"]');

  Ele := FWD.FindElementByID('loginName');

  FWD.SendKey(Ele, 'test@sina.cn');

  Ele := FWD.FindElementByID('loginPassword');

  FWD.SendKey(Ele, 'weibopassword');

  Ele := FWD.FindElementByID('loginAction');
  FWD.ElementClick(Ele);

end;

procedure TestTPhantomjs.SetUp;
begin
  FWD :=TWebDriver.Create(nil);
  //StartFireFox;
  StartIEDriver;
  //StartPhantomjs;

  FCMD :=TDelphiCommand.Create(nil);
  FWD.Cmd :=FCMD;
  //TestInit
end;

procedure TestTPhantomjs.StartFireFox;
begin
  FWD.BrowserType :=btFirefox;
  FWD.DiskCache :=false;
  fwd.LogFile :='d:\webdriver\firefox_log.log';
  FWD.StartPm('d:\webdriver\geckodriver_x86.exe');
end;

procedure TestTPhantomjs.StartPhantomjs;
begin
  FWD.BrowserType :=btPhantomjs;
  FWD.DiskCache :=false;
  FWD.LogFile :='e:\temp\phantomjs_log.log';
  FWD.StartPm('D:\webdriver\Phantomjs.exe');

end;

procedure TestTPhantomjs.TearDown;
begin
  if Assigned(FCMD) then
    FreeAndNil(FCMD);
  FreeAndnil(FWD);

end;

procedure TestTPhantomjs.TestClearAllSession;
var
  AllSession: string;
  Json: TJsonArray;
  Session: string;
  I: integer;
begin
  TestInit;
  AllSession := FWD.GetAllSession;
  Json := TJsonArray.Create;
  try
  
      Json.FromJSON(AllSession);
      for I := 0 to Json.Count - 1 do
      begin
        Session := Json.O[I].S['id'];
        FWD.CloseWindow(Session);
        FWD.DeleteSession(Session);
      end;
   
  finally
    FreeAndnil(Json);
  end;
end;

procedure TestTPhantomjs.TestDeleteSession;
begin
  FWD.DeleteSession;
end;

procedure TestTPhantomjs.TestExecuteScript;
var
  xxx: string;
begin
  TestInit;
  FWD.NewSession;
  FWD.Set_Window_Size(1366, 768);
  FWD.Implicitly_Wait(3000);
  FWD.GetURL('https://passport.weibo.cn/signin/login');
  // FWD.ExecuteScript('document.getElementById("loginPassword").value="12121212"');
  // xxx := FWD.ExecuteScript('return document.title');
  xxx := FWD.ExecuteScript('return document.body.innerHTML');

  FWD.Save_screenshot('..\temp.png');
end;

procedure TestTPhantomjs.TestGetAllCookies;
var
  Element: string;
  enabled: string;
  Cookies: string;
  lst: TStringList;
  state: string;
begin
  TestInit;
  Sleep(500);

  FWD.NewSession;

  // FWD.Set_Window_Size(1366, 768);

  FWD.GetURL('http://www.weibo.com');
  FWD.Set_Window_Size(1366, 768);

  FWD.Implicitly_Wait(1500);

  Element := FWD.FindElementByID('loginname');
  if Element <> '' then
  begin

    FWD.SendKey(Element, 'weiboaddress');
    Element := FWD.FindElementByXPath
      ('//input[@type="password" and @node-type="password"]');

    FWD.SendKey(Element, 'aaaa');
    Element := FWD.FindElementByXPath
      ('//a[@action-type="btn_submit" and @node-type="submitBtn" ]');
    if FWD.GetElementAttribute(Element, 'enabled') = 'true' then
    begin

      FWD.ElementClick(Element);
    end;

  end;

  Cookies := FWD.GetAllCookie;
  try
    lst := TStringList.Create;
    lst.Text := Cookies;
    lst.SaveToFile('..\..\weibo_allcookies.txt');
  finally
    FreeAndnil(lst);
  end;

end;

procedure TestTPhantomjs.TestGetURL;
begin

  FWD.NewSession;
  FWD.Set_Window_Size(1366, 768);
  FWD.GetURL('http://m.weibo.cn');
end;

procedure TestTPhantomjs.TestInit;
var
  ExeName: string;
  CookieFiles: string;
begin
  FWD.BrowserType := btPhantomjs;
  FWD.Address := '127.0.0.1';
  FWD.Port :=8080;
  ExeName := '..\..\..\Phantomjs.exe';
  CookieFiles := '..\..\..\phantomjs.cookies';
  FWD.CookieFiles :=CookieFiles;
  //FWD.StartPm(ExeName);
end;

procedure TestTPhantomjs.TestNewSession;
begin

  FWD.NewSession;
end;

procedure TestTPhantomjs.TestScreenShot;
var
  hand: string;
  Ele: string;
  Json: TJsonObject;
  Count: integer;
begin

  TestInit;
  Sleep(500);
  FWD.NewSession;
  FWD.Set_Window_Size(1920, 1080);
  FWD.GetURL('https://passport.weibo.cn/signin/login?entry=mweibo');
  Sleep(3000);
  FWD.Save_screenshot('e:\temp\test.png');
  Ele := FWD.FindElementsByXPath
    ('//div[@class="card card9 line-around" and @data-act-type="hover"]');
  FWD.Implicitly_Wait(3000);
  Ele := FWD.FindElementByID('loginName');
  FWD.SendKey(Ele, 'test@sina.cn');
  Ele := FWD.FindElementByID('loginPassword');
  FWD.SendKey(Ele, 'aaa');
  Ele := FWD.FindElementByID('loginAction');
  FWD.ElementClick(Ele);

  Json := TJsonObject.Create;
  Count := 0;
  try

    Ele := '';
    while Count < 100 do
    begin
      // try
      Ele := FWD.FindElementsByXPath
        ('//div[@class="card card9 line-around" and @data-act-type="hover"]');
      Json.Parse(Ele);
      Count := Json.Count;
      Sleep(1000);
      FWD.ExecuteScript
        ('document.body.scrollTop = document.body.scrollHeight;');
      // except

      // end;
    end;
    Sleep(300);
    // Ele :=FWD.FindElementByXPath('//input[@id="loginnamea"]');
    if Ele <> '' then
    begin

      FWD.Save_screenshot('e:\temp\test.png');
      FWD.CloseWindow;
    end;
  finally
    FreeAndnil(Json);
  end;

end;

procedure TestTPhantomjs.TestGetElement;
var
  Element: string;
begin
  TestInit;
  Sleep(500);
  FWD.NewSession;
  FWD.Set_Window_Size(1366, 768);
  FWD.GetURL('https://passport.weibo.cn/signin/login?entry=mweibo');
  FWD.Implicitly_Wait(3000);
  Element := FWD.FindElementByID('loginName');
  CheckHasError;
end;

procedure TestTPhantomjs.TestGetElements;
var
  divs: string;
  QJ: TJsonArray;
  I: integer;
  Item: TJsonObject;
  Element: string;
begin
  TestInit;
  FWD.NewSession;
  FWD.Set_Window_Size(1366, 768);
  FWD.GetURL('http://www.weibo.com');
  Sleep(3000);

  Element := FWD.FindElementByID('loginname');
  if Element <> '' then
  begin

    FWD.SendKey(Element, 'test@sina.cn');
    Element := FWD.FindElementByXPath
      ('//input[@type="password" and @node-type="password"]');

    FWD.SendKey(Element, 'aaa');
    Element := FWD.FindElementByXPath
      ('//a[@action-type="btn_submit" and @node-type="submitBtn" ]');
    if FWD.GetElementAttribute(Element, 'enabled') = 'true' then
    begin

      FWD.ElementClick(Element);
    end;
  end;
  Sleep(5000);
  divs := FWD.FindElementsByXPath('//div[@action-type="feed_list_item"]');
  QJ := TJsonArray.Create;
  try
    QJ.Parse(divs);
    for I := 0 to QJ.Count - 1 do
    begin
      Item := QJ.O[I];
      Element := Item.ToJSON(false);
      FWD.Element_ScreenShort(Element, 'E:\temp\' + inttostr(I) + '.png');
    end;
  finally
    FreeAndnil(QJ);
  end;
end;

procedure TestTPhantomjs.TestLoginWeibo;
var
  Element: string;
  enabled: string;
  SessionID: string;
begin
  TestInit;
  Sleep(500);

  FWD.TimeOut := 120 * 1000;
  SessionID := FWD.NewSession;
  FWD.PageLoadTimeout(90 * 1000);
  CheckHasError;
  // FWD.Set_Window_Size(1366, 768);

  FWD.GetURL('http://www.weibo.com');
  CheckHasError;
  FWD.Set_Window_Size(1366, 768);
  CheckHasError;
  Sleep(3000);
  Element := FWD.FindElementByID('loginname');
  CheckHasError;
  if Element <> '' then
  begin

    FWD.SendKey(Element, 'test@sina.cn');
    CheckHasError;
    Element := FWD.FindElementByXPath
      ('//input[@type="password" and @node-type="password"]');
    CheckHasError;

    FWD.SendKey(Element, 'aaaa');
    CheckHasError;
    Element := FWD.FindElementByXPath
      ('//a[@action-type="btn_submit" and @node-type="submitBtn" ]');
    CheckHasError;
    if FWD.GetElementAttribute(Element, 'enabled') = 'true' then
    begin
      FWD.Set_Window_Size(1366, 768);
      CheckHasError;
      FWD.ElementClick(Element);
      CheckHasError;
    end;

  end;

  FWD.Save_screenshot('e:\temp\weibo.png');

end;

procedure TestTPhantomjs.TestSaveElementScreen;
var
  Element: string;
begin
  TestInit;
  Sleep(500);

  FWD.NewSession;

  FWD.Set_Window_Size(1366, 768);

  FWD.GetURL('http://www.weibo.com');

  Sleep(5000);
  FWD.Implicitly_Wait(3000);

  Element := FWD.FindElementByXPath('//div[@class="W_unlogin_v2"]');
  FWD.Element_ScreenShort(Element, 'e:\temp\login.png');
end;

procedure TestTPhantomjs.TestSendKey;
var
  Element: string;
begin
  TestInit;
  Sleep(500);

  FWD.NewSession;


  FWD.Set_Window_Size(1366, 768);


  FWD.GetURL('https://passport.weibo.cn/signin/login?entry=mweibo');

  Sleep(3000);

  Element := FWD.FindElementByID('loginName');
  FWD.SendKey(Element, 'test@sina.cn');
  Element := FWD.FindElementByID('loginPassword');
  FWD.SendKey(Element, 'aaa');
  Element := FWD.FindElementByID('loginAction');
  FWD.ElementClick(Element);
  Sleep(3000);
  FWD.Save_screenshot('..\..\weibo.png');

end;

procedure TestTPhantomjs.TestSetWindowSize;
begin
  TestInit;
  FWD.NewSession;
  FWD.Set_Window_Size(1366, 768);
end;

procedure TestTPhantomjs.TestCloseWindow;
var
  ParamSessionID: string;
begin
  // TODO: Setup method call parameters
  FWD.CloseWindow(ParamSessionID);
  CheckEquals(FWD.HasError, false, FWD.ErrorMessage);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestStartPm;
var
  cookieFile: string;
  ExeName: string;
begin
  // TODO: Setup method call parameters
  FWD.StartPm(ExeName);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestFindElementByID;
var
  ReturnValue: string;
  ID: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWD.FindElementByID(ID);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestFindElementByTag;
var
  ReturnValue: string;
  TagName: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWD.FindElementByTag(TagName);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestFindElementByClassName;
var
  ReturnValue: string;
  ClasName: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWD.FindElementByClassName(ClasName);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestFindElement;
var
  ReturnValue: string;
  KeyName: string;
  usingName: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWD.FindElement(usingName, KeyName);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestFindElements;
var
  ReturnValue: string;
  KeyName: string;
  usingName: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWD.FindElements(usingName, KeyName);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestFindElementByLinkText;
var
  ReturnValue: string;
  LinkText: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWD.FindElementByLinkText(LinkText);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestFindElementByXPath;
var
  ReturnValue: string;
  XPath: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWD.FindElementByXPath(XPath);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestGetCurrentWindowHandle;
var
  ReturnValue: string;
begin
  ReturnValue := FWD.GetCurrentWindowHandle;
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestGetElementAttribute;
var
  ReturnValue: string;
  attributename: string;
  Element: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWD.GetElementAttribute(Element, attributename);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestSave_screenshot;
var
  FileName: string;
begin
  // TODO: Setup method call parameters
  FWD.Save_screenshot(FileName);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestSet_Window_Size;
var
  WindowHandle: string;
  Height: integer;
  Width: integer;
begin
  // TODO: Setup method call parameters
  FWD.Set_Window_Size(Width, Height, WindowHandle);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestElementClick;
var
  Element: string;
begin
  // TODO: Setup method call parameters
  FWD.ElementClick(Element);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestElement_Location;
var
  ReturnValue: string;
  Element: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWD.Element_Location(Element);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestElement_ScreenShort;
var
  FileName: string;
  Element: string;
begin
  // TODO: Setup method call parameters
  FWD.Element_ScreenShort(Element, FileName);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestElement_Size;
var
  ReturnValue: string;
  Element: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWD.Element_Size(Element);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestFindElementsByXPath;
var
  ReturnValue: string;
  XPath: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWD.FindElementsByXPath(XPath);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestFindElementsByTag;
var
  ReturnValue: string;
  TagName: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWD.FindElementsByTag(TagName);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestFindElementsByLinkText;
var
  ReturnValue: string;
  LinkText: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWD.FindElementsByLinkText(LinkText);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestFindElementsByID;
var
  ReturnValue: string;
  ID: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWD.FindElementsByID(ID);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestFindElementsByClassName;
var
  ReturnValue: string;
  ClasName: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FWD.FindElementsByClassName(ClasName);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestGetAllSession;
var
  ReturnValue: string;
begin
  ReturnValue := FWD.GetAllSession;
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestGet_AllCookies;
var
  ReturnValue: string;
begin
  ReturnValue := FWD.GetAllCookie;
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestImplicitly_Wait;
var
  waitTime: Double;
begin
  // TODO: Setup method call parameters
  FWD.Implicitly_Wait(waitTime);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestQuit;
begin
  FWD.Quit;
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestRefresh;
var
  ParamSessionID: string;
begin
  // TODO: Setup method call parameters
  FWD.Refresh(ParamSessionID);
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestTerminatePhantomjs;
begin
  FWD.TerminateWebDriver;
  // TODO: Validate method results
end;

procedure TestTPhantomjs.TestClearAll;
begin
  FWD.Clear;
  CheckEquals(FWD.HasError, false, FWD.ErrorMessage);
end;

procedure TestTPhantomjs.TestItJuzi;
var
  Element :string;
  html:string;
  stream:TStringStream;
begin
  //FWD.Clear;
  FWD.NewSession;
  FWD.Set_Window_Size(1920,1080);
  FWD.Implicitly_Wait(5);
  FWD.GetURL('https://www.itjuzi.com/user/login?flag=radar&redirect=/investevent');

  // input username
  html :=FWd.GetDocument;
  //html :=fwd.ExecuteScript('return document.body.InnerHTML' );
  stream :=TStringStream.Create('',TEncoding.UTF8);
  try
    stream.WriteString(html);
    stream.SaveToFile('e:\temp\test.html');
  finally
    FreeAndNil(stream);
  end;
  Element :=FWD.findElementByID('create_account_email');
  FWD.SendKey(Element,'wac@yeah.net');
  //input password
  Element :=FWD.FindElementByID('create_account_password');
  FWD.SendKey(Element,'123456');
  Element :=FWD.FindElementByID('login_btn');
  FWD.ElementClick(Element);

  FWD.Save_screenshot('e:\temp\test.png');
end;

function TestTBrowserCMD.NewSession: string;
const
  NEW_SESSION_PARAM = '{"desiredCapabilities": {"browserName":"phantomjs",' +
    '"phantomjs.page.settings.userAgent": "Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1667.0 Safari/537.36"'
    + ' , "platform": "windows", "version": "", "javascriptEnabled": true},' +
    '"capabilities": {"browserName": "phantomjs", "firstMatch": [],' +
    '"phantomjs.page.settings.userAgent": "Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1667.0 Safari/537.36"'
    + ',"platform": "windows", "alwaysMatch": {}, "javascriptEnabled": true, "version": ""}}';
var
  command: string;
  status: string;
  resp: string;
begin
  command := 'http://127.0.0.1:81/wd/hub/session';

  resp := FCMD.ExecutePost(command, NEW_SESSION_PARAM);
  FQJSON.Parse(PChar(resp));
  if FQJSON.S['status'] = '0' then
  begin
    result := FQJSON.S['sessionId'];
  end
  else
  begin
    raise Exception.Create('new session error:' + resp);
  end;
end;

procedure TestTBrowserCMD.SetUp;
begin
  FCMD := TDriverCommand.Create(nil);
  FQJSON := TJsonObject.Create;
end;

procedure TestTBrowserCMD.TearDown;
begin
  FreeAndnil(FQJSON);
  FreeAndnil(FCMD);
end;

procedure TestTBrowserCMD.TestExecuteDelete;
var
  command: string;
begin
  // TODO: Setup method call parameters
  FCMD.ExecuteDelete(command);
  // TODO: Validate method results
end;

procedure TestTBrowserCMD.TestExecuteGet;
var
  ReturnValue: string;
  URL: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FCMD.ExecuteGet(URL);
  // TODO: Validate method results
end;

procedure TestTBrowserCMD.TestExecutePost;
var
  ReturnValue: string;
  Data: string;
  URL: string;
  Session: string;
begin
  // TODO: Setup method call parameters
  // Session :=NewSession;
  // URL:='http://127.0.0.1:81/wd/hub/session/'+Session+'/url';
  URL := 'http://127.0.0.1:81/wd/hub/session/377b8d50-27b4-11e7-bd60-4bd9a6b64703/url';

  Data := '{"url":"http://s.weibo.com/weibo/%25E5%259B%25BD%25E5%258A%25A1%25E9%2599%25A2%25E5%2587%258F%25E7%25A8%258E?topnav=1&wvr=6&b=1","sessionid":"7e893fd0-27b4-11e7-bd60-4bd9a6b64703"}';
  ReturnValue := FCMD.ExecutePost(URL, Data);
  // TODO: Validate method results
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTPhantomjs.Suite);
RegisterTest(TestTBrowserCMD.Suite);


end.
